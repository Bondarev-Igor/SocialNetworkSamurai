{"version":3,"sources":["api/api.ts","redux/dialogs-reducer.ts","components/Users/users.module.css","assets/images/preloader.gif","components/common/FormControls/FormControl.module.css","components/common/Preloader/Preloader.tsx","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","utils/object-helpers.ts","redux/users-reducer.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Header/Header.tsx","redux/auth-reducer.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","redux/app-reducer.ts","hoc/withSuspense.tsx","App.tsx","serviceWorker.ts","redux/redux-store.ts","index.tsx","components/common/FormControls/FormControls.tsx","utils/validators/validator.ts","components/common/Paginator/Paginator.module.css","components/Header/Header.module.css","redux/profile-reducer.ts","components/Navbar/Navbar.module.css","assets/images/ava.jpg"],"names":["instance","axios","create","baseURL","withCredentials","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","authAPI","me","login","email","password","rememberMe","logout","SEND_MESSAGE","initialState","dialogs","id","name","messages","message","sendMessageCreator","newMessageBody","type","dialogsReducer","state","action","body","module","exports","Preloader","props","style","backgroundColor","src","preloader","Navbar","className","nav","item","to","activeClassName","activeLink","News","Music","Settings","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_USERS_TOTAL_COUNT","TOGGLE_IS_FETCHING","users","totalUsersCount","isFetchig","followingInProgress","followSuccess","unfollowSuccess","setUsers","setCurrentPage","setUsersTotalCount","totalCount","toggleIsFetching","isFetching","toggleFollowingProgress","followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","followed","filter","Paginator","pagesCount","Math","ceil","totalItemsCount","pages","i","push","portionCount","portionSize","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","onClick","p","padding","selectedPage","e","onPageChanged","User","user","photos","small","userPhoto","disabled","some","Users","key","getUser","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetchig","getFollowingInProgress","UsersContainer","pageNumber","this","React","Component","compose","connect","bind","page","Header","header","alt","loginBlock","isAuth","SET_USER_DATA","setAuthUserData","payload","getAuthUserData","authReducer","HeaderContainer","auth","LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","placeholder","validate","required","component","Input","formSummaryError","length","stopSubmit","_error","initialized","appReducer","withSuspense","fallback","DialogsContainer","lazy","ProfileContainer","App","initializeApp","path","render","Login","withRouter","app","promise","Promise","all","Boolean","window","location","hostname","match","reducers","combineReducers","profilePage","profileReducer","dialogsPage","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","Textarea","input","meta","hasError","touched","formControl","value","maxLengthCreator","maxLength","ADD_POST","SET_USER_PROFILE","SET_STATUS","DELETE_POST","SAVE_PHOTO_SUCCESS","posts","likesCount","profile","addPostActionCreator","newPostText","setStatus","getUserProfile","file","newPost","postId"],"mappings":"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","file":"static/js/main.d66f7776.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport {ProfileType} from \"../components/Profile/ProfileContainer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"7add98d9-734d-4189-972a-5d1bc689d34f\"\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\r\n        return instance.get<any>(\r\n            `users?page=${currentPage}&count=${pageSize}`,\r\n        )\r\n            .then(response => {\r\n                return response.data\r\n            });\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<any>(\r\n            `follow/${userId}`,{});\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete<any>(`follow/${userId}`);\r\n    },\r\n    getProfile(userId: number) {\r\n        console.warn('Please use profileAPI');\r\n        return profileAPI.getProfile(userId);\r\n    },\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/`+userId);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get(`profile/status/`+userId);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put (`profile/status/`, { status: status });\r\n    },\r\n    savePhoto(photoFile: any) {\r\n        const formData = new FormData();\r\n        formData.append('image', photoFile)\r\n        return instance.put (`/profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        } )\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me () {\r\n        return instance.get<any>(`auth/me`);\r\n    },\r\n    login (email: string, password: string, rememberMe = false) {\r\n        return instance.post(`/auth/login`, { email, password, rememberMe });\r\n    },\r\n    logout () {\r\n        return instance.delete(`auth/login`);\r\n    },\r\n}\r\n\r\n\r\n","import {DialogType, MessageType} from \"./store\";\r\n\r\nconst SEND_MESSAGE = \"network/dialogs-reducer/SEND_MESSAGE\";\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych'},\r\n        {id: 2, name: 'Elena'},\r\n        {id: 3, name: 'Pavel'},\r\n        {id: 4, name: 'Victor'},\r\n        {id: 5, name: 'Valera'}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'Ku'},\r\n        {id: 2, message: 'Hi'},\r\n        {id: 3, message: 'Yo'},\r\n        {id: 4, message: 'Waz'},\r\n        {id: 5, message: 'Zzz'}\r\n    ],\r\n}\r\n\r\nexport type DialogsPageType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    newMessageBody: string\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            let body = action.newMessageBody;\r\n            return  {\r\n                ...state,\r\n            messages:[...state.messages, {id: 6, message: body}]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const sendMessageCreator =(newMessageBody: string) => ({type: SEND_MESSAGE, newMessageBody});\r\n\r\nexport default dialogsReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__2GNqc\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.5ebe3408.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControl_formControl__369yT\",\"error\":\"FormControl_error__3IcNB\",\"formSummaryError\":\"FormControl_formSummaryError__mDuyP\"};","import preloader from \"../../../assets/images/preloader.gif\";\r\nimport React from \"react\";\r\n\r\ntype PropsType = {\r\n    \r\n}\r\n\r\nlet Preloader = (props: PropsType) => {\r\n        return <div style={{backgroundColor: 'white'}}>\r\n            <img src={preloader} />\r\n        </div>\r\n};\r\n\r\nexport default Preloader;","import React from 'react';\r\nimport style from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={style.nav}>\r\n            <div className={style.item}>\r\n                <NavLink to='/profile' activeClassName={style.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to='/dialogs' activeClassName={style.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to='/users' activeClassName={style.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to='/news' activeClassName={style.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to='/music' activeClassName={style.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to='/settings' activeClassName={style.activeLink}>Settings</NavLink>\r\n            </div>\r\n\r\n        </nav>\r\n    )\r\n};\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport style from './News.module.css';\r\n\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default News;","import React from 'react';\r\nimport style from './Music.module.css';\r\n\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div>\r\nMusic\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Music;","import React from 'react';\r\nimport style from './Settings.module.css';\r\n\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Settings;","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((u: any) => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}","import {usersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\n\r\nconst FOLLOW = \"network/users-reducer/FOLLOW\";\r\nconst UNFOLLOW = \"network/users-reducer/UNFOLLOW\";\r\nconst SET_USERS = \"network/users-reducer/SET_USERS\";\r\nconst SET_CURRENT_PAGE = \"network/users-reducer/SET_CURRENT-PAG\";\r\nconst SET_USERS_TOTAL_COUNT = \"network/users-reducer/SET_USERS_TOTAL_COUNT\";\r\nconst TOGGLE_IS_FETCHING = \"network/users-reducer/TOGGLE_IS_FETCHING\"\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"network/users-reducer/TOGGLE_IS_FOLLOWING_PROGRESS\"\r\n\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type UserType = {\r\n    id: number,\r\n    photos: PhotosType,\r\n    name: string,\r\n    followed: boolean,\r\n    status: string,\r\n    location: LocationType\r\n}\r\nexport type LocationType = {\r\n    city: string,\r\n    country: string\r\n}\r\nexport type setCurrentPageActionType = {\r\n    type: \"SET_CURRENT_PAGE\"\r\n    currentPage: number\r\n}\r\ntype ActionType = setCurrentPageActionType\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 20,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetchig: true,\r\n    followingInProgress: [] as Array<number>\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case FOLLOW :\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n                // // первым делом, мы создаем копию всего state\r\n                // ...state,\r\n                // // далее создаем копию массива, внутри которой мы будем что-то менять\r\n                // // для этого очень хорошо подходит метод массива map, т.к. он на основе\r\n                // //  старого массива возвращает новый массив и позволяет сделать в нем изменения\r\n                // users: state.users.map(u => {\r\n                //     // если u.id в пробегаемом массиве равна той userId, которая пришла в action\r\n                //     // мы далжны сделать в нем изменения: followed поменять на противоположный\r\n                //     if (u.id === action.userId) {\r\n                //         // но мы не можем изменить пользователя, который к нам пришел, т.к.\r\n                //         // массив, который к нам пришел должен остаться неизменным,\r\n                //         // то мы создаем копию этого пользователя и вернуть уже его копию\r\n                //         return {...u, followed: true}\r\n                //     }\r\n                //     // если id совпадают мы возвращаем копию, если нет то тот же самый объект\r\n                //     return u;\r\n                // })\r\n            };\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n                // users: state.users.map(u => {\r\n                //     if (u.id === action.userId) {\r\n                //         return {...u, followed: false}\r\n                //     }\r\n                //     return u;\r\n                // })\r\n            };\r\n        case SET_USERS: {\r\n            //придут пользователи(users), я возьму старый стейт,\r\n            //пользователей, которые там были и перезатру их\r\n            //теми пользователями, которые пришли\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            };\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            // создаем объект и меняем в нем currentPage на то, что\r\n            // придет в action\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_USERS_TOTAL_COUNT : {\r\n            return {...state, totalUsersCount: action.totalCount}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetchig: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n};\r\n\r\n// В АС нужен userId, чтобы понимать за каким юзером нам следить.\r\n// В АС он попадет как параметр.\r\n\r\nexport const followSuccess = (userId: number) => ({type: FOLLOW, userId});\r\nexport const unfollowSuccess = (userId: number) => ({type: UNFOLLOW, userId});\r\n// массив пользователей изначально бдует пустой, т.е. нам нужен АС, кот.\r\n// будет сетать user. users придут к нам с сервера, мы возьмем их\r\n// и засетаем в стейт\r\nexport const setUsers = (users: Array<UserType>) => ({type: SET_USERS, users});\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage});\r\nexport const setUsersTotalCount = (totalCount: number) => ({type: SET_USERS_TOTAL_COUNT, totalCount});\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching});\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching,\r\n    userId\r\n})\r\n\r\nexport const requestUsers = (page: number, pageSize: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(page))\r\n        let data = await usersAPI.getUsers(page, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setUsersTotalCount(data.totalCount))\r\n    }\r\n}\r\n\r\nconst followUnfollowFlow = async (dispatch: Dispatch, userId: number, apiMethod: any, actionCreator: any) => {\r\n    dispatch(toggleFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId);\r\n    if(response.data.resultCode == 0){\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(userId), followSuccess);\r\n    }\r\n}\r\nexport const unfollow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(userId), unfollowSuccess);\r\n    }\r\n}\r\n\r\n// export const follow = (userId: number) => {\r\n//     return async (dispatch: Dispatch) => {\r\n//         dispatch(toggleFollowingProgress(true, userId));\r\n//         let response = await usersAPI.follow(userId)\r\n//         if (response.data.resultCode === 0) {\r\n//             dispatch(followSuccess(userId))\r\n//         }\r\n//         dispatch(toggleFollowingProgress(false, userId))\r\n//     }\r\n// }\r\n//\r\n// export const unfollow = (userId: number) => {\r\n//     return async (dispatch: Dispatch) => {\r\n//         dispatch(toggleFollowingProgress(true, userId))\r\n//         let response = await usersAPI.unfollow(userId)\r\n//         if (response.data.resultCode === 0) {\r\n//             dispatch(unfollowSuccess(userId))\r\n//         }\r\n//         dispatch(toggleFollowingProgress(false, userId))\r\n//     }\r\n// }\r\n\r\nexport default usersReducer;","import React, {useState} from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize: number\r\n}\r\n\r\nconst Paginator = (props: PropsType) => {\r\n\r\n    // определяем количество страниц для отрисовки\r\n    // разделив количество всех пользователей на\r\n    // размер страницы для отрисовки\r\n    // затем полученный результат от деления округляем в большую сторону\r\n    let pagesCount = Math.ceil(props.totalItemsCount / props.pageSize);\r\n    // создаём массив страниц, котороый потом отрисуем\r\n    let pages = [];\r\n    // заполним массив pages\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    //Определяем общее количество порций страниц.\r\n    //Делим, ранее определённое, общее количество страниц на нужный нам\r\n    //размер порции из props\r\n    let portionCount = Math.ceil(pagesCount/props.portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    //Ниже определяем левую и правую границы порции страниц по формулам.\r\n    let leftPortionPageNumber = (portionNumber - 1) * props.portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * props.portionSize;\r\n\r\n    return <div className={styles.paginator}>\r\n        { portionNumber > 1 &&\r\n        <button onClick={() => { setPortionNumber (portionNumber - 1)}}>PREV</button>}\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map(p => {\r\n            return <span\r\n                style ={{padding: \"0px 3px 0px 3px \"}}\r\n                className={props.currentPage === p ? styles.selectedPage : \" \"}\r\n                         onClick={(e) => {\r\n                             props.onPageChanged(p)\r\n                         }}>{p}</span>\r\n        })}\r\n        { portionCount > portionNumber &&\r\n        <button onClick={() => { setPortionNumber (portionNumber + 1)}}>NEXT</button>}\r\n    </div>\r\n}\r\n\r\nexport default Paginator;\r\n","import React from \"react\";\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/ava.jpg\";\r\nimport {setCurrentPage, UserType} from \"../../redux/users-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nconst User = (props: PropsType) => {\r\n    return (\r\n        <div>\r\n        <span>\r\n                    <div>\r\n                        <NavLink to={'/profile/' + props.user.id}>\r\n                            <img src={props.user.photos.small != null ? props.user.photos.small : userPhoto}\r\n                                 className={styles.userPhoto}/>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {\r\n                            props.user.followed ?\r\n                                <button disabled={props.followingInProgress.some(id => id === props.user.id)}\r\n                                        onClick={() => {\r\n                                            props.unfollow(props.user.id)\r\n                                        }}>Unfollow</button>\r\n                                : <button disabled={props.followingInProgress.some(id => id === props.user.id)}\r\n                                          onClick={() => {\r\n                                              props.follow(props.user.id)\r\n                                          }}>Follow</button>\r\n                        }\r\n               </div>\r\n        </span>\r\n            <span>\r\n                             <span>\r\n                            <div>{props.user.name}</div>\r\n                            <div>{props.user.status}</div>\r\n                            </span>\r\n                            <span>\r\n                            <div>{\"user.location.country\"}</div>\r\n                            <div>{\"user.location.city\"}</div>\r\n                            </span>\r\n\r\n        </span>\r\n        </div>\r\n\r\n    )\r\n};\r\nexport default User;\r\n","import React from \"react\";\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/ava.jpg\";\r\nimport {setCurrentPage, UserType} from \"../../redux/users-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\n\r\ntype PropsType = {\r\n    users: Array<UserType>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => void\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nconst Users = (props: PropsType) => {\r\n\r\n    return <div>\r\n        <Paginator totalItemsCount={props.totalUsersCount}\r\n                   pageSize={props.pageSize}\r\n                   currentPage={props.currentPage}\r\n                   onPageChanged={props.onPageChanged}\r\n                   portionSize={20}/>\r\n        <div>\r\n            {\r\n                props.users.map(u => <User user={u}\r\n                                           followingInProgress={props.followingInProgress}\r\n                                           key={u.id}\r\n                                           unfollow={props.unfollow}\r\n                                           follow={props.follow}\r\n                    />\r\n                )\r\n\r\n\r\n\r\n                //     <div key={u.id}>\r\n                //     <span>\r\n                //         <div>\r\n                //             <NavLink to={'/profile/' + u.id}>\r\n                //                 <img src={u.photos.small != null ? u.photos.small : userPhoto}\r\n                //                      className={styles.userPhoto}/>\r\n                //             </NavLink>\r\n                //         </div>\r\n                //         <div>\r\n                //             {\r\n                //                 u.followed ?\r\n                //                     <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                //                             onClick={() => {\r\n                //                                 props.unfollow(u.id)\r\n                //                             }}>Unfollow</button>\r\n                //                     : <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                //                               onClick={() => {\r\n                //                                   props.follow(u.id)\r\n                //                               }}>Follow</button>\r\n                //             }\r\n                //        </div>\r\n                //                 </span>\r\n                //     <span>\r\n                //                 <span>\r\n                //                 <div>{u.name}</div>\r\n                //                 <div>{u.status}</div>\r\n                //                 </span>\r\n                //                 <span>\r\n                //                 <div>{\"u.location.country\"}</div>\r\n                //                 <div>{\"u.location.city\"}</div>\r\n                //                 </span>\r\n                //\r\n                //                 </span>\r\n                // </div>)\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Users;\r\n","import {createSelector} from \"reselect\";\r\n\r\nexport const getUsersSelector = (state: any) => {\r\n    return state.usersPage.users;\r\n}\r\nexport  const getUser = createSelector(getUsersSelector, (users: any) => {\r\n    return users.filter ((u: any) => true)\r\n})\r\n\r\nexport const getPageSize = (state: any) => {\r\n    return state.usersPage.pageSize;\r\n}\r\nexport const getTotalUsersCount = (state: any) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\nexport const getCurrentPage = (state: any) => {\r\n    return state.usersPage.currentPage;\r\n}\r\nexport const getIsFetchig = (state: any) => {\r\n    return state.usersPage.isFetchig;\r\n}\r\nexport const getFollowingInProgress = (state: any) => {\r\n    return state.usersPage.followingInProgress;\r\n}\r\n\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow,requestUsers,\r\n    setCurrentPage, setUsers, setUsersTotalCount,\r\n    toggleFollowingProgress, unfollow, UserType\r\n} from \"../../redux/users-reducer\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetchig,\r\n    getPageSize,\r\n    getTotalUsersCount, getUser,\r\n} from \"../../redux/users-selectors\";\r\n\r\n\r\ntype PropsType = {\r\n    users: Array<UserType>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: Array<UserType>) => void\r\n    setUsersTotalCount: (totalCount: number) => void\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    setCurrentPage: (pageNumber: number) => void\r\n    isFetchig: boolean\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => void\r\n    followingInProgress: Array<number>\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\nclass UsersContainer extends React.Component <PropsType> {\r\n\r\n    componentDidMount() {\r\n        let {currentPage, pageSize} = this.props\r\n        this.props.getUsers(currentPage, pageSize);\r\n        // this.props.toggleIsFetching(true)\r\n        //\r\n        // usersAPI.getUsers(this.props.currentPage, this.props.pageSize).then(data => {\r\n        //         this.props.toggleIsFetching(false)\r\n        //         this.props.setUsers(data.items)\r\n        //         this.props.setUsersTotalCount(data.totalCount)\r\n        //     });\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.setCurrentPage(pageNumber)\r\n        const {pageSize} = this.props;\r\n        this.props.getUsers(pageNumber, pageSize)\r\n    }\r\n\r\n\r\n    render(): React.ReactElement<any, string | React.JSXElementConstructor<any>> | string | number | {} | React.ReactNodeArray | React.ReactPortal | boolean | null | undefined {\r\n        return <>\r\n            {this.props.isFetchig ? <Preloader/>  : null}\r\n            <Users\r\n                totalUsersCount={this.props.totalUsersCount}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                onPageChanged={this.onPageChanged}\r\n                users={this.props.users}\r\n                follow={this.props.follow}\r\n                unfollow={this.props.unfollow}\r\n                toggleFollowingProgress={this.props.toggleFollowingProgress}\r\n                followingInProgress = {this.props.followingInProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\n\r\n// mapStateToProps принимает весь state целиком и возвращает\r\n// объект только с теми данными, которые нам нужны\r\n// let mapStateToProps = (state: AppStateType) => ({\r\n//         users: state.usersPage.users,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         totalUsersCount: state.usersPage.totalUsersCount,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetchig: state.usersPage.isFetchig,\r\n//         followingInProgress: state.usersPage.followingInProgress\r\n// });\r\n\r\nlet mapStateToProps = (state: any) => ({\r\n    users: getUser(state),\r\n    pageSize: getPageSize(state),\r\n    totalUsersCount: getTotalUsersCount(state),\r\n    currentPage: getCurrentPage(state),\r\n    isFetchig: getIsFetchig(state),\r\n    followingInProgress: getFollowingInProgress(state),\r\n});\r\n\r\n// mapDispatchToProps нужна для того, чтобы передавать\r\n// презентационной компоненте callbacks\r\n\r\n// let mapDispatchToProps = (dispatch: any) => {\r\n//     return {\r\n//         // это функция, которая будет диспатчить вызываемые ActionCreater\r\n//         // followAC.\r\n//         // Мы диспатчим не АС,а результат работы АС!!!\r\n//         follow: (userId: number) => {\r\n//             dispatch(followAC(userId))\r\n//         },\r\n//         unfollow: (userId: number) => {\r\n//             dispatch(unfollowAC(userId))\r\n//         },\r\n//         setUsers: (users: Array<UserType>) => {\r\n//             dispatch(setUsersAC(users))\r\n//         },\r\n//         setCurrentPage: (pageNumber: number) => {\r\n//             dispatch(setCurrentPageAC(pageNumber))\r\n//         },\r\n//         setUsersTotalCount: (totalCount: number) => {\r\n//             dispatch(setUsersTotalCountAC(totalCount))\r\n//         },\r\n//         toggleIsFetching: (isFetching: boolean) => {\r\n//             dispatch(toggleIsFetchingAC(isFetching))\r\n//         }\r\n//     }\r\n// }\r\n\r\n\r\n// export default connect(mapStateToProps, {follow, unfollow, setUsers,\r\n//     setCurrentPage, setUsersTotalCount, toggleFollowingProgress, getUsers})(UsersContainer);\r\n\r\nexport default compose <any>(connect(mapStateToProps, {follow, unfollow, setUsers,\r\n     setCurrentPage, setUsersTotalCount, toggleFollowingProgress, getUsers: requestUsers})) (UsersContainer) as React.ComponentType","import React from 'react';\r\nimport style from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    isAuth: boolean\r\n    login: null|string\r\n}\r\n\r\nconst Header = (props:any) => {\r\n    return (\r\n        <header className={style.header}>\r\n\r\n            <img\r\n                src=\"https://png.pngtree.com/template/20190313/ourlarge/pngtree-minimalist-bird-logo-image_66208.jpg \"\r\n                alt=\"Logo\"/>\r\n            \r\n                <div className={style.loginBlock}>\r\n                    {props.isAuth ? <div>{props.login}   <button onClick={props.logout}>Log out</button> </div>: <NavLink to='/login'>Login</NavLink>}\r\n                </div>\r\n        </header>\r\n    )\r\n};\r\n\r\nexport default Header;","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = \"network/auth/SET_USER_DATA\";\r\n\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n};\r\n\r\nexport type AuthStateType ={\r\n    id: null|number\r\n    email: null|string\r\n    login: null|boolean\r\n    isAuth: boolean\r\n}\r\n\r\nconst authReducer = (state = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA :\r\n            return {\r\n                // с сервера мы получаем данные, и мы их устанавливаем,\r\n                // перезатирая в старом стейте всё, что было\r\n                ... state,\r\n                // в action мы создадим объект data и его\r\n                // деструктуризируем, в нём будут лежать\r\n                // userId, email, login, таки м образом\r\n                // мы объединяем два объекта в один\r\n                ...action.payload,\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n};\r\n\r\nexport const setAuthUserData = (id: number|null, email: null | string, login: null | boolean, isAuth: boolean) => (\r\n    {type: SET_USER_DATA, payload: {id, email, login, isAuth}}\r\n);\r\n\r\nexport const getAuthUserData = () => async (dispatch: Dispatch) => {\r\n    let response = await authAPI.me();\r\n    if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data\r\n        dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean) => async (dispatch: Dispatch) => {\r\n    let response = await authAPI.login(email, password, rememberMe);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData() as any)\r\n    } else {\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\"\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n};\r\n\r\nexport const logout = () => async (dispatch: Dispatch) => {\r\n    let response = await authAPI.logout();\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false) as any)\r\n    }\r\n};\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\nclass HeaderContainer extends React.Component<any, any> {\r\n\r\n    render() {\r\n        return ( <Header {...this.props}/> )\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n})\r\n\r\nexport default connect (mapStateToProps, {logout})(HeaderContainer);","import React from \"react\";\r\nimport reduxForm, {InjectedFormProps} from \"redux-form/lib/reduxForm\";\r\nimport Field from \"redux-form/lib/Field\";\r\nimport {Input} from \"../common/FormControls/FormControls\";\r\nimport {required} from \"../../utils/validators/validator\";\r\nimport {connect} from \"react-redux\";\r\nimport {login, logout} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router\";\r\nimport styles from \"./../common/FormControls/FormControl.module.css\"\r\n\r\ntype FormDataType ={\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    placeholder={\"Email\"}\r\n                    validate={[required]}\r\n                    component = {Input}\r\n                    name = {\"email\"}/>\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    placeholder={\"Password\"}\r\n                    validate={[required]}\r\n                    component = {Input}\r\n                    name = {\"password\"}\r\n                    type = {\"password\"}/>\r\n            </div>\r\n            <div>\r\n                <Field type={\"checkbox\"} component = {Input} name = {\"rememberMe\"}/> Remember me\r\n            </div>\r\n            { error && <div className={styles.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType> ({ form: \"login\" })(LoginForm)\r\n\r\nconst Login = (props: any) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (props.isAuth){\r\n        return <Redirect to={\"/profile\"}/>\r\n    };\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n};\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default connect ( mapStateToProps, {login, logout} )(Login);","// import {Dispatch} from \"redux\";\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = \"INITIALIZED_SUCCESS\";\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n};\r\n\r\nconst appReducer = (state = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS :\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n};\r\n\r\nexport const initializedSuccess = () => ({type: INITIALIZED_SUCCESS});\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    //если несколько промисов подряд, мы их оборачиваем в массив и\r\n    //запускаем через Promise.all\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess());\r\n        });\r\n};\r\n\r\nexport default appReducer;","import React, {Component, Suspense} from \"react\";\r\nimport Preloader from \"../components/common/Preloader/Preloader\";\r\n\r\n\r\nexport const withSuspense = (Component: any) => {\r\n    return (props: any) => {\r\n        return <Suspense fallback={<Preloader/>}>\r\n            <Component {...props}/>\r\n        </Suspense>\r\n    }\r\n}\r\n\r\n","import React, {Suspense} from 'react';\r\nimport './App.css';\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport {Route, withRouter} from \"react-router-dom\";\r\nimport News from \"./components/News/News\";\r\nimport Music from \"./components/Music/Music\";\r\nimport Settings from \"./components/Settings/Settings\";\r\n// import DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\n// import ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Login from \"./components/Login/Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport Preloader from \"./components/common/Preloader/Preloader\";\r\nimport {withSuspense} from \"./hoc/withSuspense\";\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\n\r\n\r\nclass App extends React.Component <any> {\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n    }\r\n\r\n    render() {\r\n\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <div className='app-wrapper'>\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <div className='app-wrapper-content'>\r\n                    <Route path='/profile/:userId?'\r\n                           render={withSuspense(ProfileContainer)}\r\n                    />\r\n                    <Route path='/dialogs'\r\n                           render={withSuspense(DialogsContainer)}\r\n                    />\r\n                    <Route path='/users'\r\n                           render={() => <UsersContainer/>}/>\r\n                    <Route path='/news' component={News}/>\r\n                    <Route path='/music' component={Music}/>\r\n                    <Route path='/settings' component={Settings}/>\r\n                    <Route path='/login' component={Login}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\nexport default compose<any>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}))\r\n(App) as React.ComponentType;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {applyMiddleware, combineReducers, createStore, Store} from \"redux\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport profileReducer from \"./profile-reducer\";\r\n// import sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    // sidebarPage: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n})\r\n\r\nlet store: Store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\n\r\n//@ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from \"./redux/redux-store\";\r\nimport './index.css';\r\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\nReactDOM.render(\r\n    <HashRouter >\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>,\r\n    document.getElementById('root'))\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from \"react\";\r\nimport styles from \"./FormControl.module.css\";\r\nimport {required} from \"../../../utils/validators/validator\";\r\nimport Field from \"redux-form/lib/Field\";\r\n\r\nexport const Textarea = ({input, meta, ...props}: any) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                <textarea {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Input = ({input, meta, ...props}: any) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                <input {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const createField = (placeholder: any, validators: any, component: any, name: any, props: any) => (\r\n    <div>\r\n        <Field\r\n            placeholder={placeholder}\r\n            validate={validators}\r\n            component={component}\r\n            name={name}\r\n            {...props}/>\r\n    </div>\r\n)","export type FieldValidatorType = (value: string) => string|undefined\r\n\r\nexport const required:FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: FieldValidatorType) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__2z2Ah\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3XQXn\",\"loginBlock\":\"Header_loginBlock__OZKWq\"};","import {Dispatch} from \"redux\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\nconst ADD_POST = \"network/profile-reducer/ADD-POST\";\r\nconst SET_USER_PROFILE = \"network/profile-reducer/SET_USER_PROFILE\";\r\nconst SET_STATUS = \"network/profile-reducer/SET_STATUS\";\r\nconst DELETE_POST = \"network/profile-reducer/DELETE_POST\";\r\nconst SAVE_PHOTO_SUCCESS = \"network/profile-reducer/SAVE_PHOTO_SUCCESS\";\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 4},\r\n        {id: 2, message: \"It's my first post\", likesCount: 9}\r\n    ],\r\n    profile: null,\r\n    status: '',\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return  {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: ''\r\n            };\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            // мы вернём копию state, в котором мы поменяем\r\n            // profile на тот который пришёл в action\r\n             return {...state, profile: action.profile}\r\n        }\r\n        case DELETE_POST: {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id !== action.postId)\r\n            }\r\n        }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status,\r\n            }\r\n        }\r\n        case SAVE_PHOTO_SUCCESS: {\r\n            return {\r\n                ...state, profile: {...state.profile as unknown as Object, photos: action.photos }\r\n            }\r\n        }\r\n        default :\r\n            return state\r\n\r\n    }\r\n};\r\n\r\nexport const addPostActionCreator =(newPostText: string) => ({type: ADD_POST, newPostText});\r\nexport const setUserProfile=(profile: any) => ( {type: SET_USER_PROFILE, profile} );\r\nexport const setStatus = (status: string) => ( {type: SET_STATUS, status} );\r\nexport const deletePost = (postId: number) => ( {type: DELETE_POST, postId} );\r\nexport const savePhotoSuccess = (photos: any) => ( {type: SAVE_PHOTO_SUCCESS, photos} );\r\n\r\nexport const getUserProfile = (userId: number) => async (dispatch: Dispatch) => {\r\n    let response = await usersAPI.getProfile(userId);\r\n    dispatch(setUserProfile(response.data))\r\n};\r\n\r\nexport const getStatus = (userId: number) => async (dispatch: Dispatch) => {\r\n    let response = await profileAPI.getStatus(userId);\r\n    dispatch(setStatus(response.data))\r\n};\r\n\r\nexport const updateStatus = (status: string) => async (dispatch: Dispatch) => {\r\n    let response = await profileAPI.updateStatus(status);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setStatus(status))\r\n    }\r\n};\r\n\r\nexport const savePhoto = (file: any) => async (dispatch: Dispatch) => {\r\n    let response = await profileAPI.savePhoto(file);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(savePhotoSuccess(response.data.data.photos))\r\n    }\r\n};\r\n\r\nexport default profileReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2xWxT\",\"item\":\"Navbar_item__3g2fj\",\"activeLink\":\"Navbar_activeLink__1nkhl\"};","module.exports = __webpack_public_path__ + \"static/media/ava.e3ea9d39.jpg\";"],"sourceRoot":""}