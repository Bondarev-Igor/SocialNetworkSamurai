{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","style","dialog","active","to","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","addMessage","component","Textarea","placeholder","validate","required","Dialogs","dialogsPage","dialogsElements","dialogs","map","key","messagesElements","messages","isAuth","dialogsItems","values","sendMessage","newMessageBody","mapStateToPropsFromRedirect","state","auth","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React"],"mappings":"iGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,KAAO,sBAAsB,SAAW,0BAA0B,WAAa,8B,8FCoBnMC,EAVI,SAACC,GAEhB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAAO,yBAAKC,UAAWC,IAAMC,OAAS,IAAMD,IAAME,QAC9C,kBAAC,IAAD,CAASC,GAAIN,GAAOD,EAAMQ,QCJnBC,EAJC,SAACT,GACb,OAAO,yBAAKG,UAAWC,IAAMM,SAAUV,EAAMU,U,yDCsC3CC,EAAcC,YAAiB,IAkB/BC,EAAsBC,IAAW,CAACC,KAAM,wBAAlBD,EAhBL,SAACd,GACpB,OACI,0BAAMgB,SAAUhB,EAAMiB,aAAcd,UAAWC,IAAMc,YACjD,6BACI,kBAAC,IAAD,CAAOC,UAAWC,IACXZ,KAAM,iBACNa,YAAa,oBACbC,SAAU,CAACC,IAAUZ,MAEhC,6BACI,6CASDa,EAlDC,SAACxB,GAEDA,EAAMyB,YAAlB,IAEIC,EAAkB1B,EAAMyB,YAAYE,QAAQC,KAAI,SAAAvB,GAAM,OAAI,kBAAC,EAAD,CAAYG,KAAMH,EAAOG,KAAMN,GAAIG,EAAOH,GAAI2B,IAAKxB,EAAOH,QAEpH4B,EAAmB9B,EAAMyB,YAAYM,SAASH,KAAI,SAAAlB,GAAO,OAAI,kBAAC,EAAD,CAASA,QAASA,EAAQA,QAASmB,IAAKnB,EAAQR,QAEjH,IAAKF,EAAMgC,OAAQ,OAAO,kBAAC,IAAD,CAAUzB,GAAI,WAMxC,OAAO,yBAAKJ,UAAWC,IAAMuB,SACzB,yBAAKxB,UAAWC,IAAM6B,cAEjBP,GAGL,yBAAKvB,UAAWC,IAAM2B,UAElB,6BAAMD,IAGV,kBAACjB,EAAD,CAAqBG,SAfL,SAACkB,GACjBlC,EAAMmC,YAAYD,EAAOE,qB,wCCxB7BC,EAA8B,SAACC,GAAD,MAA2B,CACzDN,OAAQM,EAAMC,KAAKP,S,QCiBRQ,4BAAcC,mBAfP,SAACH,GACnB,MAAO,CACHb,YAAaa,EAAMb,YACnBO,OAAQM,EAAMC,KAAKP,WAIF,SAACU,GACtB,MAAO,CACHP,YAAa,SAACC,GACVM,EAASC,YAAmBP,UDTP,SAACQ,GAAoB,IAC5CC,EAD2C,uKAGzC,OAAKC,KAAK9C,MAAMgC,OAGT,kBAACY,EAAcE,KAAK9C,OAFhB,kBAAC,IAAD,CAAUO,GAAO,eAJa,GACjBwC,IAAMH,WAWtC,OAFqCH,kBAAQJ,EAARI,CAAqCI,KCI/DL,CAA+EhB","file":"static/js/4.8b79b0c8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__4-Nv5\",\"dialogsItems\":\"Dialogs_dialogsItems__1E2_b\",\"active\":\"Dialogs_active__ucqGu\",\"item\":\"Dialogs_item__1d3zi\",\"messages\":\"Dialogs_messages__1acZm\",\"addMessage\":\"Dialogs_addMessage__mDCyY\"};","import React from \"react\";\r\nimport style from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogType} from \"../../../redux/store\";\r\n\r\n\r\n// type dialogsDataType = {\r\n//     id: number\r\n//     name: string\r\n// }\r\n\r\nconst DialogItem = (props: DialogType) => {\r\n\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return <div className={style.dialog + \" \" + style.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n};\r\n\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport style from './../Dialogs.module.css'\r\n\r\ntype MessageType = {\r\n    id?: number\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessageType) => {\r\n    return <div className={style.message}>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport style from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogsItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPageType} from \"../../redux/dialogs-reducer\";\r\nimport {Redirect} from \"react-router\";\r\nimport Field from \"redux-form/lib/Field\";\r\nimport reduxForm, {FormSubmitHandler, SubmitHandler} from \"redux-form/lib/reduxForm\";\r\nimport {Textarea} from \"../common/FormControls/FormControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validator\";\r\n\r\n\r\ntype  PropsType = {\r\n    dialogsPage: DialogsPageType\r\n    sendMessage: (newMessageBody: string) => void\r\n    isAuth: boolean\r\n}\r\n\r\nconst Dialogs = (props: PropsType) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs.map(dialog => <DialogItem name={dialog.name} id={dialog.id} key={dialog.id}/>);\r\n\r\n    let messagesElements = props.dialogsPage.messages.map(message => <Message message={message.message} key={message.id}/>);\r\n\r\n    if (!props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n    let addNewMessage = (values: any|undefined) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return <div className={style.dialogs}>\r\n        <div className={style.dialogsItems}>\r\n\r\n            {dialogsElements}\r\n\r\n        </div>\r\n        <div className={style.messages}>\r\n\r\n            <div>{messagesElements}</div>\r\n\r\n        </div>\r\n        <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n    </div>\r\n};\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={style.addMessage}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name={\"newMessageBody\"}\r\n                       placeholder={\"Enter yor message\"}\r\n                       validate={[required, maxLength50]}/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm ({form: \"dialogAddMessageForm\"}) (AddMessageForm)\r\n\r\n\r\nexport default Dialogs;","import React, {Component} from \"react\";\r\nimport {Redirect} from \"react-router\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsFromRedirect = (state: AppStateType ) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport  const withAuthRedirect = (Component: any) => {\r\n    class RedirectComponent extends React.Component<any> {\r\n        render() {\r\n            if (!this.props.isAuth)  {\r\n                return <Redirect to =  {'/login'} />\r\n            }\r\n            return <Component {...this.props}/>;\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsFromRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","import React from \"react\";\r\nimport {sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n};\r\n\r\nexport default compose <any>(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect) (Dialogs) as React.ComponentType\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n//\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\n//\r\n// export default DialogsContainer;"],"sourceRoot":""}